!function(o,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(o.CKEditor5=o.CKEditor5||{},o.CKEditor5.textselection=t())}(self,(()=>(()=>{var o={"ckeditor5/src/core.js":(o,t,e)=>{o.exports=e("dll-reference CKEditor5.dll")("./src/core.js")},"dll-reference CKEditor5.dll":o=>{"use strict";o.exports=CKEditor5.dll}},t={};function e(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={exports:{}};return o[i](s,s.exports,e),s.exports}e.d=(o,t)=>{for(var i in t)e.o(t,i)&&!e.o(o,i)&&Object.defineProperty(o,i,{enumerable:!0,get:t[i]})},e.o=(o,t)=>Object.prototype.hasOwnProperty.call(o,t);var i={};return(()=>{"use strict";e.d(i,{default:()=>r});var o=e("ckeditor5/src/core.js");class t extends o.Plugin{static get requires(){return["SourceEditing"]}static get pluginName(){return"TextSelection"}constructor(...o){super(...o),this.sourceEditingCursorPosition=-1,console.log("Textselection created.")}setCursorPos(o){console.log("Set cursorPos to:",o),0!==o.path[1]?this.sourceEditingCursorPosition=o:console.log("Skipped ...")}getCursorPos(){return this.sourceEditingCursorPosition}init(){const o=this.editor;o.model.document.on("change",(()=>{o.model.change((t=>{o.model.insertContent(t.createText("ðŸ“Œ"))})),this.saveCursorPosition()})),this.listenTo(o.plugins.get("SourceEditing"),"change:isSourceEditingMode",((o,t,e)=>{e&&this.sourceEditingCursorPosition&&this.restoreCursorPosition()}))}saveCursorPosition(){const o=this.editor.model.document.selection.getLastPosition();o?(this.setCursorPos(o),this.convertPosition()):console.error("Position empty")}restoreCursorPosition(){const o=this.editor,t=o.model;this.convertPosition(),this.sourceEditingCursorPosition&&t.change((t=>{const e=o.plugins.get("SourceEditing");if(e&&e.isSourceEditingMode){const t=document.querySelector(".ck-source-editing-area textarea"),e=this.sourceEditingCursorPosition.path[1],i=String(t.value).split("\n");console.log("lines: ",i);let r=0;i.forEach(((o,t)=>{t<this.sourceEditingCursorPosition.path[0]&&(r+=o.length)})),console.log(this.sourceEditingCursorPosition.path,r),t&&(t.setSelectionRange(e+r,e+r+1),o.editing.view.focus())}}))}convertPosition(){const o=this.editor.getData();console.log("Data: ",String(o).split("\n"))}}const r={Textselection:t}})(),i=i.default})()));